// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// quartic_kernel_cpp
arma::vec quartic_kernel_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_quartic_kernel_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(quartic_kernel_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// quartic_kernelos
double quartic_kernelos(double d, double bw);
RcppExport SEXP _spNetwork_quartic_kernelos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(quartic_kernelos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// triangle_kernel_cpp
arma::vec triangle_kernel_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_triangle_kernel_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(triangle_kernel_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// triangle_kernelos
double triangle_kernelos(double d, double bw);
RcppExport SEXP _spNetwork_triangle_kernelos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(triangle_kernelos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// uniform_kernel_cpp
arma::vec uniform_kernel_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_uniform_kernel_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(uniform_kernel_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// uniform_kernelos
double uniform_kernelos(double d, double bw);
RcppExport SEXP _spNetwork_uniform_kernelos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(uniform_kernelos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// epanechnikov_kernel_cpp
arma::vec epanechnikov_kernel_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_epanechnikov_kernel_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(epanechnikov_kernel_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// epanechnikov_kernelos
double epanechnikov_kernelos(double d, double bw);
RcppExport SEXP _spNetwork_epanechnikov_kernelos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(epanechnikov_kernelos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// triweight_kernel_cpp
arma::vec triweight_kernel_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_triweight_kernel_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(triweight_kernel_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// triweight_kernelos
double triweight_kernelos(double d, double bw);
RcppExport SEXP _spNetwork_triweight_kernelos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(triweight_kernelos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// tricube_kernel_cpp
arma::vec tricube_kernel_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_tricube_kernel_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(tricube_kernel_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// tricube_kernelos
double tricube_kernelos(double d, double bw);
RcppExport SEXP _spNetwork_tricube_kernelos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(tricube_kernelos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// cosine_kernel_cpp
arma::vec cosine_kernel_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_cosine_kernel_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_kernel_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// cosine_kernelos
double cosine_kernelos(double d, double bw);
RcppExport SEXP _spNetwork_cosine_kernelos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_kernelos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_kernel_cpp
arma::vec gaussian_kernel_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_gaussian_kernel_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_kernel_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_kernelos
double gaussian_kernelos(double d, double bw);
RcppExport SEXP _spNetwork_gaussian_kernelos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_kernelos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_kernel_scaled_cpp
arma::vec gaussian_kernel_scaled_cpp(arma::vec d, double bw);
RcppExport SEXP _spNetwork_gaussian_kernel_scaled_cpp(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_kernel_scaled_cpp(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// gaussian_kernel_scaledos
double gaussian_kernel_scaledos(double d, double bw);
RcppExport SEXP _spNetwork_gaussian_kernel_scaledos(SEXP dSEXP, SEXP bwSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type bw(bwSEXP);
    rcpp_result_gen = Rcpp::wrap(gaussian_kernel_scaledos(d, bw));
    return rcpp_result_gen;
END_RCPP
}
// corrfactor_discontinuous_sparse
List corrfactor_discontinuous_sparse(List neighbour_list, NumericVector events, DataFrame line_list, NumericVector bws, int max_depth);
RcppExport SEXP _spNetwork_corrfactor_discontinuous_sparse(SEXP neighbour_listSEXP, SEXP eventsSEXP, SEXP line_listSEXP, SEXP bwsSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(corrfactor_discontinuous_sparse(neighbour_list, events, line_list, bws, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// corrfactor_discontinuous
List corrfactor_discontinuous(List neighbour_list, NumericVector events, DataFrame line_list, NumericVector bws, int max_depth);
RcppExport SEXP _spNetwork_corrfactor_discontinuous(SEXP neighbour_listSEXP, SEXP eventsSEXP, SEXP line_listSEXP, SEXP bwsSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(corrfactor_discontinuous(neighbour_list, events, line_list, bws, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// corrfactor_continuous_sparse
List corrfactor_continuous_sparse(List neighbour_list, NumericVector events, DataFrame line_list, NumericVector bws, int max_depth);
RcppExport SEXP _spNetwork_corrfactor_continuous_sparse(SEXP neighbour_listSEXP, SEXP eventsSEXP, SEXP line_listSEXP, SEXP bwsSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(corrfactor_continuous_sparse(neighbour_list, events, line_list, bws, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// corrfactor_continuous
List corrfactor_continuous(List neighbour_list, NumericVector events, DataFrame line_list, NumericVector bws, int max_depth);
RcppExport SEXP _spNetwork_corrfactor_continuous(SEXP neighbour_listSEXP, SEXP eventsSEXP, SEXP line_listSEXP, SEXP bwsSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(corrfactor_continuous(neighbour_list, events, line_list, bws, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// get_loo_values_continuous
DataFrame get_loo_values_continuous(List neighbour_list, NumericVector samples, NumericVector sweights, NumericVector events, NumericVector weights, NumericVector bws, std::string kernel_name, DataFrame line_list, int max_depth);
RcppExport SEXP _spNetwork_get_loo_values_continuous(SEXP neighbour_listSEXP, SEXP samplesSEXP, SEXP sweightsSEXP, SEXP eventsSEXP, SEXP weightsSEXP, SEXP bwsSEXP, SEXP kernel_nameSEXP, SEXP line_listSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sweights(sweightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_name(kernel_nameSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_loo_values_continuous(neighbour_list, samples, sweights, events, weights, bws, kernel_name, line_list, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// get_loo_values_discontinuous
NumericVector get_loo_values_discontinuous(List neighbour_list, NumericVector samples, NumericVector sweights, NumericVector events, NumericVector weights, NumericVector bws, std::string kernel_name, DataFrame line_list, int max_depth);
RcppExport SEXP _spNetwork_get_loo_values_discontinuous(SEXP neighbour_listSEXP, SEXP samplesSEXP, SEXP sweightsSEXP, SEXP eventsSEXP, SEXP weightsSEXP, SEXP bwsSEXP, SEXP kernel_nameSEXP, SEXP line_listSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sweights(sweightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_name(kernel_nameSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_loo_values_discontinuous(neighbour_list, samples, sweights, events, weights, bws, kernel_name, line_list, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// get_loo_values_simple
NumericVector get_loo_values_simple(List neighbour_list, NumericVector samples, NumericVector sweights, NumericVector events, NumericVector weights, NumericVector bws, std::string kernel_name, DataFrame line_list, int max_depth);
RcppExport SEXP _spNetwork_get_loo_values_simple(SEXP neighbour_listSEXP, SEXP samplesSEXP, SEXP sweightsSEXP, SEXP eventsSEXP, SEXP weightsSEXP, SEXP bwsSEXP, SEXP kernel_nameSEXP, SEXP line_listSEXP, SEXP max_depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sweights(sweightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_name(kernel_nameSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    rcpp_result_gen = Rcpp::wrap(get_loo_values_simple(neighbour_list, samples, sweights, events, weights, bws, kernel_name, line_list, max_depth));
    return rcpp_result_gen;
END_RCPP
}
// find_nearest_object_in_line_rtree
IntegerVector find_nearest_object_in_line_rtree(NumericMatrix pts, List lines, double min_dist, int max_iter);
RcppExport SEXP _spNetwork_find_nearest_object_in_line_rtree(SEXP ptsSEXP, SEXP linesSEXP, SEXP min_distSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pts(ptsSEXP);
    Rcpp::traits::input_parameter< List >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< double >::type min_dist(min_distSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(find_nearest_object_in_line_rtree(pts, lines, min_dist, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// cut_lines_at_distances_cpp
List cut_lines_at_distances_cpp(List lines, NumericVector dists);
RcppExport SEXP _spNetwork_cut_lines_at_distances_cpp(SEXP linesSEXP, SEXP distsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dists(distsSEXP);
    rcpp_result_gen = Rcpp::wrap(cut_lines_at_distances_cpp(lines, dists));
    return rcpp_result_gen;
END_RCPP
}
// add_vertices_lines_cpp
List add_vertices_lines_cpp(NumericMatrix points, List lines, arma::colvec nearest_lines_idx, float mindist);
RcppExport SEXP _spNetwork_add_vertices_lines_cpp(SEXP pointsSEXP, SEXP linesSEXP, SEXP nearest_lines_idxSEXP, SEXP mindistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< List >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type nearest_lines_idx(nearest_lines_idxSEXP);
    Rcpp::traits::input_parameter< float >::type mindist(mindistSEXP);
    rcpp_result_gen = Rcpp::wrap(add_vertices_lines_cpp(points, lines, nearest_lines_idx, mindist));
    return rcpp_result_gen;
END_RCPP
}
// add_center_lines_cpp
List add_center_lines_cpp(List lines);
RcppExport SEXP _spNetwork_add_center_lines_cpp(SEXP linesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lines(linesSEXP);
    rcpp_result_gen = Rcpp::wrap(add_center_lines_cpp(lines));
    return rcpp_result_gen;
END_RCPP
}
// split_lines_at_points_cpp
List split_lines_at_points_cpp(arma::mat Xmat, List lines, arma::colvec nearest_lines_idx, float mindist);
RcppExport SEXP _spNetwork_split_lines_at_points_cpp(SEXP XmatSEXP, SEXP linesSEXP, SEXP nearest_lines_idxSEXP, SEXP mindistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< List >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type nearest_lines_idx(nearest_lines_idxSEXP);
    Rcpp::traits::input_parameter< float >::type mindist(mindistSEXP);
    rcpp_result_gen = Rcpp::wrap(split_lines_at_points_cpp(Xmat, lines, nearest_lines_idx, mindist));
    return rcpp_result_gen;
END_RCPP
}
// lixelize_lines_cpp
List lixelize_lines_cpp(List lines, double lx_length, double mindist);
RcppExport SEXP _spNetwork_lixelize_lines_cpp(SEXP linesSEXP, SEXP lx_lengthSEXP, SEXP mindistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lines(linesSEXP);
    Rcpp::traits::input_parameter< double >::type lx_length(lx_lengthSEXP);
    Rcpp::traits::input_parameter< double >::type mindist(mindistSEXP);
    rcpp_result_gen = Rcpp::wrap(lixelize_lines_cpp(lines, lx_length, mindist));
    return rcpp_result_gen;
END_RCPP
}
// continuous_nkde_cpp_arma_sparse
DataFrame continuous_nkde_cpp_arma_sparse(List neighbour_list, NumericVector events, NumericVector weights, DataFrame samples, NumericVector bws, std::string kernel_name, DataFrame nodes, DataFrame line_list, int max_depth, bool verbose);
RcppExport SEXP _spNetwork_continuous_nkde_cpp_arma_sparse(SEXP neighbour_listSEXP, SEXP eventsSEXP, SEXP weightsSEXP, SEXP samplesSEXP, SEXP bwsSEXP, SEXP kernel_nameSEXP, SEXP nodesSEXP, SEXP line_listSEXP, SEXP max_depthSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_name(kernel_nameSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(continuous_nkde_cpp_arma_sparse(neighbour_list, events, weights, samples, bws, kernel_name, nodes, line_list, max_depth, verbose));
    return rcpp_result_gen;
END_RCPP
}
// continuous_nkde_cpp_arma
DataFrame continuous_nkde_cpp_arma(List neighbour_list, NumericVector events, NumericVector weights, DataFrame samples, NumericVector bws, std::string kernel_name, DataFrame nodes, DataFrame line_list, int max_depth, bool verbose);
RcppExport SEXP _spNetwork_continuous_nkde_cpp_arma(SEXP neighbour_listSEXP, SEXP eventsSEXP, SEXP weightsSEXP, SEXP samplesSEXP, SEXP bwsSEXP, SEXP kernel_nameSEXP, SEXP nodesSEXP, SEXP line_listSEXP, SEXP max_depthSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_name(kernel_nameSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(continuous_nkde_cpp_arma(neighbour_list, events, weights, samples, bws, kernel_name, nodes, line_list, max_depth, verbose));
    return rcpp_result_gen;
END_RCPP
}
// discontinuous_nkde_cpp_arma_sparse
DataFrame discontinuous_nkde_cpp_arma_sparse(List neighbour_list, NumericVector events, NumericVector weights, DataFrame samples, NumericVector bws, std::string kernel_name, DataFrame nodes, DataFrame line_list, int max_depth, bool verbose);
RcppExport SEXP _spNetwork_discontinuous_nkde_cpp_arma_sparse(SEXP neighbour_listSEXP, SEXP eventsSEXP, SEXP weightsSEXP, SEXP samplesSEXP, SEXP bwsSEXP, SEXP kernel_nameSEXP, SEXP nodesSEXP, SEXP line_listSEXP, SEXP max_depthSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_name(kernel_nameSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(discontinuous_nkde_cpp_arma_sparse(neighbour_list, events, weights, samples, bws, kernel_name, nodes, line_list, max_depth, verbose));
    return rcpp_result_gen;
END_RCPP
}
// discontinuous_nkde_cpp_arma
DataFrame discontinuous_nkde_cpp_arma(List neighbour_list, NumericVector events, NumericVector weights, DataFrame samples, NumericVector bws, std::string kernel_name, DataFrame nodes, DataFrame line_list, int max_depth, bool verbose);
RcppExport SEXP _spNetwork_discontinuous_nkde_cpp_arma(SEXP neighbour_listSEXP, SEXP eventsSEXP, SEXP weightsSEXP, SEXP samplesSEXP, SEXP bwsSEXP, SEXP kernel_nameSEXP, SEXP nodesSEXP, SEXP line_listSEXP, SEXP max_depthSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neighbour_list(neighbour_listSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type events(eventsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bws(bwsSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_name(kernel_nameSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type nodes(nodesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type line_list(line_listSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(discontinuous_nkde_cpp_arma(neighbour_list, events, weights, samples, bws, kernel_name, nodes, line_list, max_depth, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spNetwork_quartic_kernel_cpp", (DL_FUNC) &_spNetwork_quartic_kernel_cpp, 2},
    {"_spNetwork_quartic_kernelos", (DL_FUNC) &_spNetwork_quartic_kernelos, 2},
    {"_spNetwork_triangle_kernel_cpp", (DL_FUNC) &_spNetwork_triangle_kernel_cpp, 2},
    {"_spNetwork_triangle_kernelos", (DL_FUNC) &_spNetwork_triangle_kernelos, 2},
    {"_spNetwork_uniform_kernel_cpp", (DL_FUNC) &_spNetwork_uniform_kernel_cpp, 2},
    {"_spNetwork_uniform_kernelos", (DL_FUNC) &_spNetwork_uniform_kernelos, 2},
    {"_spNetwork_epanechnikov_kernel_cpp", (DL_FUNC) &_spNetwork_epanechnikov_kernel_cpp, 2},
    {"_spNetwork_epanechnikov_kernelos", (DL_FUNC) &_spNetwork_epanechnikov_kernelos, 2},
    {"_spNetwork_triweight_kernel_cpp", (DL_FUNC) &_spNetwork_triweight_kernel_cpp, 2},
    {"_spNetwork_triweight_kernelos", (DL_FUNC) &_spNetwork_triweight_kernelos, 2},
    {"_spNetwork_tricube_kernel_cpp", (DL_FUNC) &_spNetwork_tricube_kernel_cpp, 2},
    {"_spNetwork_tricube_kernelos", (DL_FUNC) &_spNetwork_tricube_kernelos, 2},
    {"_spNetwork_cosine_kernel_cpp", (DL_FUNC) &_spNetwork_cosine_kernel_cpp, 2},
    {"_spNetwork_cosine_kernelos", (DL_FUNC) &_spNetwork_cosine_kernelos, 2},
    {"_spNetwork_gaussian_kernel_cpp", (DL_FUNC) &_spNetwork_gaussian_kernel_cpp, 2},
    {"_spNetwork_gaussian_kernelos", (DL_FUNC) &_spNetwork_gaussian_kernelos, 2},
    {"_spNetwork_gaussian_kernel_scaled_cpp", (DL_FUNC) &_spNetwork_gaussian_kernel_scaled_cpp, 2},
    {"_spNetwork_gaussian_kernel_scaledos", (DL_FUNC) &_spNetwork_gaussian_kernel_scaledos, 2},
    {"_spNetwork_corrfactor_discontinuous_sparse", (DL_FUNC) &_spNetwork_corrfactor_discontinuous_sparse, 5},
    {"_spNetwork_corrfactor_discontinuous", (DL_FUNC) &_spNetwork_corrfactor_discontinuous, 5},
    {"_spNetwork_corrfactor_continuous_sparse", (DL_FUNC) &_spNetwork_corrfactor_continuous_sparse, 5},
    {"_spNetwork_corrfactor_continuous", (DL_FUNC) &_spNetwork_corrfactor_continuous, 5},
    {"_spNetwork_get_loo_values_continuous", (DL_FUNC) &_spNetwork_get_loo_values_continuous, 9},
    {"_spNetwork_get_loo_values_discontinuous", (DL_FUNC) &_spNetwork_get_loo_values_discontinuous, 9},
    {"_spNetwork_get_loo_values_simple", (DL_FUNC) &_spNetwork_get_loo_values_simple, 9},
    {"_spNetwork_find_nearest_object_in_line_rtree", (DL_FUNC) &_spNetwork_find_nearest_object_in_line_rtree, 4},
    {"_spNetwork_cut_lines_at_distances_cpp", (DL_FUNC) &_spNetwork_cut_lines_at_distances_cpp, 2},
    {"_spNetwork_add_vertices_lines_cpp", (DL_FUNC) &_spNetwork_add_vertices_lines_cpp, 4},
    {"_spNetwork_add_center_lines_cpp", (DL_FUNC) &_spNetwork_add_center_lines_cpp, 1},
    {"_spNetwork_split_lines_at_points_cpp", (DL_FUNC) &_spNetwork_split_lines_at_points_cpp, 4},
    {"_spNetwork_lixelize_lines_cpp", (DL_FUNC) &_spNetwork_lixelize_lines_cpp, 3},
    {"_spNetwork_continuous_nkde_cpp_arma_sparse", (DL_FUNC) &_spNetwork_continuous_nkde_cpp_arma_sparse, 10},
    {"_spNetwork_continuous_nkde_cpp_arma", (DL_FUNC) &_spNetwork_continuous_nkde_cpp_arma, 10},
    {"_spNetwork_discontinuous_nkde_cpp_arma_sparse", (DL_FUNC) &_spNetwork_discontinuous_nkde_cpp_arma_sparse, 10},
    {"_spNetwork_discontinuous_nkde_cpp_arma", (DL_FUNC) &_spNetwork_discontinuous_nkde_cpp_arma, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_spNetwork(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
