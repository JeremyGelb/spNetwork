% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nkde.R
\name{nkde_grided}
\alias{nkde_grided}
\title{Gridded version of nkde function.}
\usage{
nkde_grided(
  lines,
  points,
  snap_dist,
  lx_length,
  kernel_range,
  kernel = "quartic",
  tol = 0.1,
  digits = 3,
  mindist = NULL,
  weights = NULL,
  grid_shape = c(2, 2),
  show_progress = TRUE
)
}
\arguments{
\item{lines}{The SpatialLinesDataFrame to use as a network}

\item{points}{The events to use in the kernel density estimation}

\item{snap_dist}{The maximum distance snapping between points and lines}

\item{lx_length}{The expected length of a lixel}

\item{kernel_range}{The range of the kernel function}

\item{kernel}{The name of the kernel function to use (must be one of
quartic, gaussian or epanechnikov). Default is Quartic}

\item{tol}{The tolerence for topological operations}

\item{digits}{The number of digits to keep in the coordinates of the
geometries}

\item{mindist}{The minimum length of a lixel. Defaut is NULL. If NULL,
mindist is set as lx_length/10}

\item{weights}{The name of a column of the SpatialPointsDataFrame
containing the weight of each point. Default is NULL. If NULL then each
point has a weight of 1.}

\item{grid_shape}{A vector of length 2 indicating the shape of the grid to
use for splitting the dataset. Default is c(2,2)}

\item{show_progress}{A boolean indicating if a plot should be displayed to
track the progressing of the algorithm.}
}
\value{
Vector of kernel densities (one for each origin)
}
\description{
The dataset is spatialy splitted in squares convering the extent of the
SpatiaLine. This greatly improve performance and memory usage. To avoid
frontier effect, a buffer is used (size of the kernel range parameter)
around the square when building local graphs. As a consequence, too small
squares will lead to longer calculation.
}
\examples{
data(mtl_network)
data(bike_accidents)
lixels_nkde <- nkde_grided(mtl_network, bike_accident,
      snap_dist = 150,
      lx_length = 150,
      mindist = 50,
      kernel_range = 800,
      kernel="quartic",
      grid_shape=c(5,5)
)
}
