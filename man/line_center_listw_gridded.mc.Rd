% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel_neighbouring.R
\name{line_center_listw_gridded.mc}
\alias{line_center_listw_gridded.mc}
\title{generate listw object (spdep like) based on network distances using
multiple processes}
\usage{
line_center_listw_gridded.mc(
  lines,
  maxdistance,
  line_weight = "length",
  dist_func = "inverse",
  matrice_type = "B",
  grid_shape = c(2, 2),
  digits = 3,
  verbose = "progressbar"
)
}
\arguments{
\item{lines}{A SpatialLinesDataFrame}

\item{maxdistance}{The maximum distance between two observation to
considere them as neighbours.}

\item{line_weight}{The ponderation to use for lines. Default is "length"
(the geographical length), but can be the name of a column. The value is
considered proportional with the geographical length of the lines.}

\item{dist_func}{Indicates the function to use to convert the distance
between observation in spatial weights. Can be 'identity', 'inverse',
'squared inverse' or a function with one parameter x that will be
vectorized internally}

\item{matrice_type}{The type of the weighting scheme. Can be 'B' for Binary,
'W' for row weighted, see the documentation of spdep::nb2listw for details}

\item{grid_shape}{A vector of length 2 indicating the shape of the grid to
use for splitting the dataset. Default is c(2,2)}

\item{digits}{the number of digits to keep in the spatial coordinates (
simplification used to reduce risk of topological error)}

\item{verbose}{A string indicating how the advance of the process is
displayed. Default is progressbar "progressbar" shows main steps and
progress bar for intermediar steps, "silent" show nothing}
}
\value{
A listw object (spdep like)
}
\description{
The distances are calculated from the centroid of each line to the centroid
of each other lines.
}
\examples{
data(mtl_network)
future::plan(future::multiprocess(workers=2))
listw <- line_center_listw_gridded.mc(mtl_network,maxdistance=800,
        dist_func = 'squared inverse', matrice_type='B',
        grid_shape = c(5,5))
\dontshow{
   ## R CMD check: make sure any open connections are closed afterward
   if (!inherits(future::plan(), "sequential")) future::plan(future::sequential)
}
}
